{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/OWNER/Desktop/invicta/Invicta/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@angular/router\";\nexport class UserService {\n  constructor(afAuth, afs, router) {\n    this.afAuth = afAuth;\n    this.afs = afs;\n    this.router = router;\n    this.userID = \"\"; // Get the auth state, then fetch the Firestore user document or return null\n\n    this.user$ = this.afAuth.authState.pipe(switchMap(user => {\n      // Logged in\n      if (user) {\n        this.userID = user.uid;\n        return this.afs.doc(`users/${user.uid}`).valueChanges();\n      } else {\n        // Logged out\n        return of(null);\n      }\n    }));\n  }\n\n  getUserID() {\n    return this.userID;\n  }\n  /** Authenticates the user with Google */\n\n\n  googleSignin() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"here\");\n      const provider = new firebase.auth.GoogleAuthProvider();\n      const credential = yield _this.afAuth.signInWithPopup(provider);\n      return _this.updateUserData(credential.user);\n    })();\n  }\n  /** Signs the user out of Google */\n\n\n  signOut() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.afAuth.signOut();\n\n      _this2.router.navigate(['/']);\n    })();\n  }\n  /**\r\n   * Saves the user data to firebase\r\n   * @param user The user we are updating\r\n   */\n\n\n  updateUserData(user) {\n    // Sets user data to firestore on login\n    const userRef = this.afs.doc(`users/${user.uid}`);\n    return userRef.set({\n      uid: user.uid,\n      email: user.email,\n      displayName: user.displayName,\n      photoURL: user.photoURL\n    }, {\n      merge: true\n    });\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.Router));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\OWNER\\Desktop\\invicta\\Invicta\\src\\app\\services\\user.service.ts"],"names":[],"mappings":";AAIA,SAAsB,EAAtB,QAA+B,MAA/B;AACA,SAAS,SAAT,QAA0B,gBAA1B;AAGA,OAAO,QAAP,MAAqB,qBAArB;AACA,OAAO,sBAAP;AACA,OAAO,2BAAP;;;;;AAMA,OAAM,MAAO,WAAP,CAAkB;AAKtB,EAAA,WAAA,CACU,MADV,EAEU,GAFV,EAGU,MAHV,EAGwB;AAFd,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,GAAA,GAAA,GAAA;AACA,SAAA,MAAA,GAAA,MAAA;AALV,SAAA,MAAA,GAAkB,EAAlB,CAKwB,CAEpB;;AACA,SAAK,KAAL,GAAa,KAAK,MAAL,CAAY,SAAZ,CAAsB,IAAtB,CACX,SAAS,CAAC,IAAI,IAAG;AACb;AACF,UAAI,IAAJ,EAAU;AACR,aAAK,MAAL,GAAc,IAAI,CAAC,GAAnB;AACA,eAAO,KAAK,GAAL,CAAS,GAAT,CAAmB,SAAS,IAAI,CAAC,GAAG,EAApC,EAAwC,YAAxC,EAAP;AACD,OAHD,MAGO;AACL;AACA,eAAO,EAAE,CAAC,IAAD,CAAT;AACD;AACF,KATQ,CADE,CAAb;AAYH;;AAED,EAAA,SAAS,GAAA;AACP,WAAO,KAAK,MAAZ;AACD;AAED;;;AACM,EAAA,YAAY,GAAA;AAAA;;AAAA;AAChB,MAAA,OAAO,CAAC,GAAR,CAAY,MAAZ;AACA,YAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAT,CAAc,kBAAlB,EAAjB;AACA,YAAM,UAAU,SAAS,KAAI,CAAC,MAAL,CAAY,eAAZ,CAA4B,QAA5B,CAAzB;AACA,aAAO,KAAI,CAAC,cAAL,CAAoB,UAAU,CAAC,IAA/B,CAAP;AAJgB;AAMjB;AAED;;;AACM,EAAA,OAAO,GAAA;AAAA;;AAAA;AACX,YAAM,MAAI,CAAC,MAAL,CAAY,OAAZ,EAAN;;AACA,MAAA,MAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,CAAC,GAAD,CAArB;AAFW;AAGZ;AAED;;;AAGG;;;AACK,EAAA,cAAc,CAAC,IAAD,EAAU;AAC9B;AACA,UAAM,OAAO,GAAmC,KAAK,GAAL,CAAS,GAAT,CAAa,SAAS,IAAI,CAAC,GAAG,EAA9B,CAAhD;AAEA,WAAO,OAAO,CAAC,GAAR,CAAY;AACjB,MAAA,GAAG,EAAE,IAAI,CAAC,GADO;AAEjB,MAAA,KAAK,EAAE,IAAI,CAAC,KAFK;AAGjB,MAAA,WAAW,EAAE,IAAI,CAAC,WAHD;AAIjB,MAAA,QAAQ,EAAE,IAAI,CAAC;AAJE,KAAZ,EAKJ;AAAE,MAAA,KAAK,EAAE;AAAT,KALI,CAAP;AAOD;;AA3DqB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,eAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,gBAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,MAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFV","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '../models/user';\r\n\r\nimport { Observable , of} from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/compat/firestore';\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  user$: Observable<User | null | undefined>;\r\n  userID : string = \"\";\r\n\r\n  constructor(\r\n    private afAuth: AngularFireAuth,\r\n    private afs: AngularFirestore,\r\n    private router: Router\r\n  ) {\r\n      // Get the auth state, then fetch the Firestore user document or return null\r\n      this.user$ = this.afAuth.authState.pipe(\r\n        switchMap(user => {\r\n            // Logged in\r\n          if (user) {\r\n            this.userID = user.uid;\r\n            return this.afs.doc<User>(`users/${user.uid}`).valueChanges();\r\n          } else {\r\n            // Logged out\r\n            return of(null);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  getUserID(){\r\n    return this.userID;\r\n  }\r\n\r\n  /** Authenticates the user with Google */\r\n  async googleSignin() {\r\n    console.log(\"here\");  \r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    const credential = await this.afAuth.signInWithPopup(provider);\r\n    return this.updateUserData(credential.user);\r\n    \r\n  }\r\n\r\n  /** Signs the user out of Google */\r\n  async signOut() {\r\n    await this.afAuth.signOut();\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  /**\r\n   * Saves the user data to firebase\r\n   * @param user The user we are updating\r\n   */\r\n  private updateUserData(user: any) {\r\n    // Sets user data to firestore on login\r\n    const userRef: AngularFirestoreDocument<User> = this.afs.doc(`users/${user.uid}`);\r\n\r\n    return userRef.set({\r\n      uid: user.uid,\r\n      email: user.email,\r\n      displayName: user.displayName,\r\n      photoURL: user.photoURL\r\n    }, { merge: true });\r\n\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}